
OLED Screen Controller Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003068  08003068  00004068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d0  080031d0  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080031d0  080031d0  000041d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031d8  080031d8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d8  080031d8  000041d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031dc  080031dc  000041dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  080031ec  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080031ec  000050cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a230  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000162a  00000000  00000000  0000f26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00010898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073e  00000000  00000000  000111c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d3a  00000000  00000000  00011906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4af  00000000  00000000  00026640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e0a  00000000  00000000  00031aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b58f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026bc  00000000  00000000  000b593c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ac  00000000  00000000  000b7ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003050 	.word	0x08003050

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003050 	.word	0x08003050

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08c      	sub	sp, #48	@ 0x30
 8000504:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
  uint8_t i = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fe0f 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f891 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f953 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f927 	bl	8000768 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800051a:	f000 f8f7 	bl	800070c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  initializeScreen(SSD1306SlaveAddressWriteMode, &hi2c1);
 800051e:	2378      	movs	r3, #120	@ 0x78
 8000520:	493e      	ldr	r1, [pc, #248]	@ (800061c <main+0x11c>)
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fa9c 	bl	8000a60 <initializeScreen>
  testScreen(SSD1306SlaveAddressWriteMode, &hi2c1);
 8000528:	2378      	movs	r3, #120	@ 0x78
 800052a:	493c      	ldr	r1, [pc, #240]	@ (800061c <main+0x11c>)
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fab7 	bl	8000aa0 <testScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(programState == 0) {
 8000532:	4b3b      	ldr	r3, [pc, #236]	@ (8000620 <main+0x120>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d104      	bne.n	8000544 <main+0x44>
		eraseScreen(SSD1306SlaveAddressWriteMode, &hi2c1);
 800053a:	2378      	movs	r3, #120	@ 0x78
 800053c:	4937      	ldr	r1, [pc, #220]	@ (800061c <main+0x11c>)
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fad2 	bl	8000ae8 <eraseScreen>
	}

	if(programState == 1) {
 8000544:	4b36      	ldr	r3, [pc, #216]	@ (8000620 <main+0x120>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d112      	bne.n	8000572 <main+0x72>
		char testMessage[] = "HELLO WORLD";
 800054c:	4a35      	ldr	r2, [pc, #212]	@ (8000624 <main+0x124>)
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	ca07      	ldmia	r2, {r0, r1, r2}
 8000554:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		drawText(testMessage, 11, 2, 0, 6, SSD1306SlaveAddressWriteMode, &hi2c1);
 8000558:	2378      	movs	r3, #120	@ 0x78
 800055a:	f107 0010 	add.w	r0, r7, #16
 800055e:	4a2f      	ldr	r2, [pc, #188]	@ (800061c <main+0x11c>)
 8000560:	9202      	str	r2, [sp, #8]
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	2306      	movs	r3, #6
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2300      	movs	r3, #0
 800056a:	2202      	movs	r2, #2
 800056c:	210b      	movs	r1, #11
 800056e:	f000 faff 	bl	8000b70 <drawText>
	}

	if(programState == 2) {
 8000572:	4b2b      	ldr	r3, [pc, #172]	@ (8000620 <main+0x120>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d13e      	bne.n	80005f8 <main+0xf8>
		char title[] = "COUNTER";
 800057a:	4a2b      	ldr	r2, [pc, #172]	@ (8000628 <main+0x128>)
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000584:	e883 0003 	stmia.w	r3, {r0, r1}
		drawText(title, 7, 0, 0, 7, SSD1306SlaveAddressWriteMode, &hi2c1);
 8000588:	2378      	movs	r3, #120	@ 0x78
 800058a:	f107 0008 	add.w	r0, r7, #8
 800058e:	4a23      	ldr	r2, [pc, #140]	@ (800061c <main+0x11c>)
 8000590:	9202      	str	r2, [sp, #8]
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2307      	movs	r3, #7
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	2200      	movs	r2, #0
 800059c:	2107      	movs	r1, #7
 800059e:	f000 fae7 	bl	8000b70 <drawText>

		char count[2];
		count[0] = (i / 10) + 48;
 80005a2:	7ffb      	ldrb	r3, [r7, #31]
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <main+0x12c>)
 80005a6:	fba2 2303 	umull	r2, r3, r2, r3
 80005aa:	08db      	lsrs	r3, r3, #3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	3330      	adds	r3, #48	@ 0x30
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	713b      	strb	r3, [r7, #4]
		count[1] = (i % 10) + 48;
 80005b4:	7ffa      	ldrb	r2, [r7, #31]
 80005b6:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <main+0x12c>)
 80005b8:	fba3 1302 	umull	r1, r3, r3, r2
 80005bc:	08d9      	lsrs	r1, r3, #3
 80005be:	460b      	mov	r3, r1
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	440b      	add	r3, r1
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	3330      	adds	r3, #48	@ 0x30
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	717b      	strb	r3, [r7, #5]
		drawText(count, 2, 13, 0, 2, SSD1306SlaveAddressWriteMode, &hi2c1);
 80005d0:	2378      	movs	r3, #120	@ 0x78
 80005d2:	1d38      	adds	r0, r7, #4
 80005d4:	4a11      	ldr	r2, [pc, #68]	@ (800061c <main+0x11c>)
 80005d6:	9202      	str	r2, [sp, #8]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2302      	movs	r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	220d      	movs	r2, #13
 80005e2:	2102      	movs	r1, #2
 80005e4:	f000 fac4 	bl	8000b70 <drawText>

		i += 1;
 80005e8:	7ffb      	ldrb	r3, [r7, #31]
 80005ea:	3301      	adds	r3, #1
 80005ec:	77fb      	strb	r3, [r7, #31]
		if(i >= 99) {
 80005ee:	7ffb      	ldrb	r3, [r7, #31]
 80005f0:	2b62      	cmp	r3, #98	@ 0x62
 80005f2:	d901      	bls.n	80005f8 <main+0xf8>
			i = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	77fb      	strb	r3, [r7, #31]
		}
	}

	if(programStateChanging == 1) {
 80005f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <main+0x130>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d109      	bne.n	8000614 <main+0x114>
		eraseScreen(SSD1306SlaveAddressWriteMode, &hi2c1);
 8000600:	2378      	movs	r3, #120	@ 0x78
 8000602:	4906      	ldr	r1, [pc, #24]	@ (800061c <main+0x11c>)
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fa6f 	bl	8000ae8 <eraseScreen>
		programStateChanging = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <main+0x130>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
		i = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	77fb      	strb	r3, [r7, #31]
	}

	HAL_Delay(200);
 8000614:	20c8      	movs	r0, #200	@ 0xc8
 8000616:	f000 fdfb 	bl	8001210 <HAL_Delay>
	if(programState == 0) {
 800061a:	e78a      	b.n	8000532 <main+0x32>
 800061c:	20000028 	.word	0x20000028
 8000620:	200000c4 	.word	0x200000c4
 8000624:	08003068 	.word	0x08003068
 8000628:	08003074 	.word	0x08003074
 800062c:	cccccccd 	.word	0xcccccccd
 8000630:	200000c5 	.word	0x200000c5

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	@ 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fcca 	bl	8002fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a28      	ldr	r2, [pc, #160]	@ (8000704 <SystemClock_Config+0xd0>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <SystemClock_Config+0xd0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000680:	4a21      	ldr	r2, [pc, #132]	@ (8000708 <SystemClock_Config+0xd4>)
 8000682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <SystemClock_Config+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a8:	2310      	movs	r3, #16
 80006aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b6:	2307      	movs	r3, #7
 80006b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fd30 	bl	8002124 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ca:	f000 fbfd 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2102      	movs	r1, #2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 ff92 	bl	8002614 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f6:	f000 fbe7 	bl	8000ec8 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	@ 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_I2C1_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	@ (8000760 <MX_I2C1_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_I2C1_Init+0x50>)
 8000718:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <MX_I2C1_Init+0x58>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_I2C1_Init+0x50>)
 800072a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800072e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_I2C1_Init+0x50>)
 800074a:	f001 f84d 	bl	80017e8 <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 fbb8 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000028 	.word	0x20000028
 8000760:	40005400 	.word	0x40005400
 8000764:	000186a0 	.word	0x000186a0

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f002 f958 	bl	8002a54 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 fb8d 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000007c 	.word	0x2000007c
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b31      	ldr	r3, [pc, #196]	@ (800089c <MX_GPIO_Init+0xe0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a30      	ldr	r2, [pc, #192]	@ (800089c <MX_GPIO_Init+0xe0>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <MX_GPIO_Init+0xe0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <MX_GPIO_Init+0xe0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a29      	ldr	r2, [pc, #164]	@ (800089c <MX_GPIO_Init+0xe0>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b27      	ldr	r3, [pc, #156]	@ (800089c <MX_GPIO_Init+0xe0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b23      	ldr	r3, [pc, #140]	@ (800089c <MX_GPIO_Init+0xe0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a22      	ldr	r2, [pc, #136]	@ (800089c <MX_GPIO_Init+0xe0>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <MX_GPIO_Init+0xe0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <MX_GPIO_Init+0xe0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a1b      	ldr	r2, [pc, #108]	@ (800089c <MX_GPIO_Init+0xe0>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b19      	ldr	r3, [pc, #100]	@ (800089c <MX_GPIO_Init+0xe0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	4816      	ldr	r0, [pc, #88]	@ (80008a0 <MX_GPIO_Init+0xe4>)
 8000848:	f000 ff9c 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4810      	ldr	r0, [pc, #64]	@ (80008a4 <MX_GPIO_Init+0xe8>)
 8000864:	f000 fe0a 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000868:	2320      	movs	r3, #32
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <MX_GPIO_Init+0xe4>)
 8000880:	f000 fdfc 	bl	800147c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2028      	movs	r0, #40	@ 0x28
 800088a:	f000 fdc0 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800088e:	2028      	movs	r0, #40	@ 0x28
 8000890:	f000 fdd9 	bl	8001446 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	@ 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020800 	.word	0x40020800

080008a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIOPin) {
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
	if(GPIOPin != B1_Pin) {
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008b8:	d001      	beq.n	80008be <HAL_GPIO_EXTI_Callback+0x16>
		__NOP();
 80008ba:	bf00      	nop
		return;
 80008bc:	e011      	b.n	80008e2 <HAL_GPIO_EXTI_Callback+0x3a>
	}

	programStateChanging = 1;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x44>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]

	if(programState >= maxProgramState) {
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x48>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2202      	movs	r2, #2
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d303      	bcc.n	80008d6 <HAL_GPIO_EXTI_Callback+0x2e>
		programState = 0;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x48>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
		return;
 80008d4:	e005      	b.n	80008e2 <HAL_GPIO_EXTI_Callback+0x3a>
	}

	programState += 1;
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x48>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	3301      	adds	r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x48>)
 80008e0:	701a      	strb	r2, [r3, #0]
}
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	200000c5 	.word	0x200000c5
 80008f0:	200000c4 	.word	0x200000c4

080008f4 <writeSSD1306Commands>:

// OLED Screen Controller Functions
void writeSSD1306Commands(uint8_t commands[], uint8_t commandsLength, uint8_t slaveAddress, I2C_HandleTypeDef* I2CHandler) {
 80008f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008f8:	b08b      	sub	sp, #44	@ 0x2c
 80008fa:	af02      	add	r7, sp, #8
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	72fb      	strb	r3, [r7, #11]
 8000904:	4613      	mov	r3, r2
 8000906:	72bb      	strb	r3, [r7, #10]
 8000908:	466b      	mov	r3, sp
 800090a:	461e      	mov	r6, r3
	uint8_t buffer[commandsLength + 1];
 800090c:	7afb      	ldrb	r3, [r7, #11]
 800090e:	1c59      	adds	r1, r3, #1
 8000910:	1e4b      	subs	r3, r1, #1
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	460a      	mov	r2, r1
 8000916:	2300      	movs	r3, #0
 8000918:	4690      	mov	r8, r2
 800091a:	4699      	mov	r9, r3
 800091c:	f04f 0200 	mov.w	r2, #0
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000928:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800092c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000930:	460a      	mov	r2, r1
 8000932:	2300      	movs	r3, #0
 8000934:	4614      	mov	r4, r2
 8000936:	461d      	mov	r5, r3
 8000938:	f04f 0200 	mov.w	r2, #0
 800093c:	f04f 0300 	mov.w	r3, #0
 8000940:	00eb      	lsls	r3, r5, #3
 8000942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000946:	00e2      	lsls	r2, r4, #3
 8000948:	460b      	mov	r3, r1
 800094a:	3307      	adds	r3, #7
 800094c:	08db      	lsrs	r3, r3, #3
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	ebad 0d03 	sub.w	sp, sp, r3
 8000954:	ab02      	add	r3, sp, #8
 8000956:	3300      	adds	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
	buffer[0] = 0x00;
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < commandsLength; i++) {
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
 8000964:	e00a      	b.n	800097c <writeSSD1306Commands+0x88>
		buffer[i + 1] = commands[i];
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	441a      	add	r2, r3
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	3301      	adds	r3, #1
 8000970:	7811      	ldrb	r1, [r2, #0]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < commandsLength; i++) {
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3301      	adds	r3, #1
 800097a:	61fb      	str	r3, [r7, #28]
 800097c:	7afb      	ldrb	r3, [r7, #11]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf0      	blt.n	8000966 <writeSSD1306Commands+0x72>
	}

	HAL_I2C_Master_Transmit(I2CHandler, slaveAddress, buffer, commandsLength + 1, HAL_MAX_DELAY);
 8000984:	7abb      	ldrb	r3, [r7, #10]
 8000986:	b299      	uxth	r1, r3
 8000988:	7afb      	ldrb	r3, [r7, #11]
 800098a:	b29b      	uxth	r3, r3
 800098c:	3301      	adds	r3, #1
 800098e:	b29b      	uxth	r3, r3
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	9200      	str	r2, [sp, #0]
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f001 f869 	bl	8001a70 <HAL_I2C_Master_Transmit>
 800099e:	46b5      	mov	sp, r6
}
 80009a0:	bf00      	nop
 80009a2:	3724      	adds	r7, #36	@ 0x24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080009aa <writeSSD1306Data>:

void writeSSD1306Data(uint8_t data[], uint8_t dataLength, uint8_t slaveAddress, I2C_HandleTypeDef* I2CHandler) {
 80009aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009ae:	b08b      	sub	sp, #44	@ 0x2c
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	460b      	mov	r3, r1
 80009b8:	72fb      	strb	r3, [r7, #11]
 80009ba:	4613      	mov	r3, r2
 80009bc:	72bb      	strb	r3, [r7, #10]
 80009be:	466b      	mov	r3, sp
 80009c0:	461e      	mov	r6, r3
	uint8_t buffer[dataLength + 1];
 80009c2:	7afb      	ldrb	r3, [r7, #11]
 80009c4:	1c59      	adds	r1, r3, #1
 80009c6:	1e4b      	subs	r3, r1, #1
 80009c8:	61bb      	str	r3, [r7, #24]
 80009ca:	460a      	mov	r2, r1
 80009cc:	2300      	movs	r3, #0
 80009ce:	4690      	mov	r8, r2
 80009d0:	4699      	mov	r9, r3
 80009d2:	f04f 0200 	mov.w	r2, #0
 80009d6:	f04f 0300 	mov.w	r3, #0
 80009da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009e6:	460a      	mov	r2, r1
 80009e8:	2300      	movs	r3, #0
 80009ea:	4614      	mov	r4, r2
 80009ec:	461d      	mov	r5, r3
 80009ee:	f04f 0200 	mov.w	r2, #0
 80009f2:	f04f 0300 	mov.w	r3, #0
 80009f6:	00eb      	lsls	r3, r5, #3
 80009f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009fc:	00e2      	lsls	r2, r4, #3
 80009fe:	460b      	mov	r3, r1
 8000a00:	3307      	adds	r3, #7
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	ebad 0d03 	sub.w	sp, sp, r3
 8000a0a:	ab02      	add	r3, sp, #8
 8000a0c:	3300      	adds	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
	buffer[0] = 0x40;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	2240      	movs	r2, #64	@ 0x40
 8000a14:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < dataLength; i++) {
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
 8000a1a:	e00a      	b.n	8000a32 <writeSSD1306Data+0x88>
		buffer[i + 1] = data[i];
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	441a      	add	r2, r3
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3301      	adds	r3, #1
 8000a26:	7811      	ldrb	r1, [r2, #0]
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < dataLength; i++) {
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	61fb      	str	r3, [r7, #28]
 8000a32:	7afb      	ldrb	r3, [r7, #11]
 8000a34:	69fa      	ldr	r2, [r7, #28]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dbf0      	blt.n	8000a1c <writeSSD1306Data+0x72>
	}

	HAL_I2C_Master_Transmit(I2CHandler, slaveAddress, buffer, dataLength + 1, HAL_MAX_DELAY);
 8000a3a:	7abb      	ldrb	r3, [r7, #10]
 8000a3c:	b299      	uxth	r1, r3
 8000a3e:	7afb      	ldrb	r3, [r7, #11]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	3301      	adds	r3, #1
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4a:	9200      	str	r2, [sp, #0]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f001 f80e 	bl	8001a70 <HAL_I2C_Master_Transmit>
 8000a54:	46b5      	mov	sp, r6
}
 8000a56:	bf00      	nop
 8000a58:	3724      	adds	r7, #36	@ 0x24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000a60 <initializeScreen>:

void initializeScreen(uint8_t slaveAddress, I2C_HandleTypeDef* I2CHandler) {
 8000a60:	b5b0      	push	{r4, r5, r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
	uint8_t initializerCommands[] = {
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <initializeScreen+0x3c>)
 8000a6e:	f107 040c 	add.w	r4, r7, #12
 8000a72:	461d      	mov	r5, r3
 8000a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a78:	682b      	ldr	r3, [r5, #0]
 8000a7a:	6023      	str	r3, [r4, #0]
		0xD5, 0x80, // Display clock divide ratio
		0x8D, 0x14, // Charge Pump
		0xAF        // Display ON
	};

	writeSSD1306Commands(initializerCommands, 21, slaveAddress, I2CHandler);
 8000a7c:	79fa      	ldrb	r2, [r7, #7]
 8000a7e:	f107 000c 	add.w	r0, r7, #12
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2115      	movs	r1, #21
 8000a86:	f7ff ff35 	bl	80008f4 <writeSSD1306Commands>
	eraseScreen(slaveAddress, I2CHandler);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	6839      	ldr	r1, [r7, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f82a 	bl	8000ae8 <eraseScreen>
}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a9c:	0800307c 	.word	0x0800307c

08000aa0 <testScreen>:

void testScreen(uint8_t slaveAddress, I2C_HandleTypeDef* I2CHandler) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
	uint8_t entireScreenOnCommand = 0xA5;
 8000aac:	23a5      	movs	r3, #165	@ 0xa5
 8000aae:	73fb      	strb	r3, [r7, #15]
	uint8_t resumeRAMContentsCommand = 0xA4;
 8000ab0:	23a4      	movs	r3, #164	@ 0xa4
 8000ab2:	73bb      	strb	r3, [r7, #14]
	writeSSD1306Commands(&entireScreenOnCommand, 1, slaveAddress, I2CHandler);
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	f107 000f 	add.w	r0, r7, #15
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	2101      	movs	r1, #1
 8000abe:	f7ff ff19 	bl	80008f4 <writeSSD1306Commands>
	HAL_Delay(300);
 8000ac2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ac6:	f000 fba3 	bl	8001210 <HAL_Delay>
	writeSSD1306Commands(&resumeRAMContentsCommand, 1, slaveAddress, I2CHandler);
 8000aca:	79fa      	ldrb	r2, [r7, #7]
 8000acc:	f107 000e 	add.w	r0, r7, #14
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	f7ff ff0e 	bl	80008f4 <writeSSD1306Commands>
	HAL_Delay(300);
 8000ad8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000adc:	f000 fb98 	bl	8001210 <HAL_Delay>
}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <eraseScreen>:

void eraseScreen(uint8_t slaveAddress, I2C_HandleTypeDef* I2CHandler) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0a6      	sub	sp, #152	@ 0x98
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
	uint8_t columnsAndPagesSetupCommands[] = {
 8000af4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b6c <eraseScreen+0x84>)
 8000af6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000afa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000afe:	6018      	str	r0, [r3, #0]
 8000b00:	3304      	adds	r3, #4
 8000b02:	8019      	strh	r1, [r3, #0]
		0x21,
		0x00, 0x7F,
		0x22,
		0x00, 0x07
	};
	writeSSD1306Commands(columnsAndPagesSetupCommands, 6, slaveAddress, I2CHandler);
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	2106      	movs	r1, #6
 8000b0e:	f7ff fef1 	bl	80008f4 <writeSSD1306Commands>

	uint8_t blankBitMap[128];
	for(int i = 0; i < 128; i++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000b18:	e00b      	b.n	8000b32 <eraseScreen+0x4a>
		blankBitMap[i] = 0x00;
 8000b1a:	f107 0208 	add.w	r2, r7, #8
 8000b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b22:	4413      	add	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 128; i++) {
 8000b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000b32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b36:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b38:	ddef      	ble.n	8000b1a <eraseScreen+0x32>
	}

	for(int page = 0; page <= 0x07; page++) {
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000b40:	e00b      	b.n	8000b5a <eraseScreen+0x72>
		writeSSD1306Data(blankBitMap, 128, slaveAddress, I2CHandler);
 8000b42:	79fa      	ldrb	r2, [r7, #7]
 8000b44:	f107 0008 	add.w	r0, r7, #8
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	2180      	movs	r1, #128	@ 0x80
 8000b4c:	f7ff ff2d 	bl	80009aa <writeSSD1306Data>
	for(int page = 0; page <= 0x07; page++) {
 8000b50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000b54:	3301      	adds	r3, #1
 8000b56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000b5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	ddef      	ble.n	8000b42 <eraseScreen+0x5a>
	}
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	3798      	adds	r7, #152	@ 0x98
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	08003090 	.word	0x08003090

08000b70 <drawText>:
	for(int page = 0; page <= 0x07; page++) {
		writeSSD1306Data(fullBitMap, 128, slaveAddress, I2CHandler);
	}
}

void drawText(char message[], uint8_t messageLengthInCharacters, uint8_t topLeftXCoordinateInCharacters, uint8_t topLeftYCoordinateInCharacters, uint8_t lineLengthInCharacters, uint8_t slaveAddress, I2C_HandleTypeDef* I2CHandler) {
 8000b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b74:	b0d5      	sub	sp, #340	@ 0x154
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 8000b7c:	f5a6 76a6 	sub.w	r6, r6, #332	@ 0x14c
 8000b80:	6030      	str	r0, [r6, #0]
 8000b82:	460e      	mov	r6, r1
 8000b84:	4610      	mov	r0, r2
 8000b86:	4619      	mov	r1, r3
 8000b88:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000b8c:	f2a3 134d 	subw	r3, r3, #333	@ 0x14d
 8000b90:	4632      	mov	r2, r6
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000b98:	f5a3 73a7 	sub.w	r3, r3, #334	@ 0x14e
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000ba4:	f2a3 134f 	subw	r3, r3, #335	@ 0x14f
 8000ba8:	460a      	mov	r2, r1
 8000baa:	701a      	strb	r2, [r3, #0]
	uint8_t characterBitMaps[][8] = {
 8000bac:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000bb0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000bb4:	4ac3      	ldr	r2, [pc, #780]	@ (8000ec4 <drawText+0x354>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	4611      	mov	r1, r2
 8000bba:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	f002 fa38 	bl	8003034 <memcpy>
//	void drawText(char message[], uint8_t messageLengthInCharacters, uint8_t topLeftXCoordinateInCharacters, uint8_t topLeftYCoordinateInCharacters, uint8_t slaveAddress, I2C_HandleTypeDef* I2CHandler) {

//	uint8_t columnEndCoordinate = 0;
//	if(topLeftXCoordinate + (fontSize*messageLengthInCharacters) > 128) { columnEndCoordinate = 127; }
//	else { columnEndCoordinate = (fontSize * messageLengthInCharacters) - 1; }
	uint8_t fontSize = 8;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	uint8_t totalPages = (messageLengthInCharacters + (lineLengthInCharacters - 1)) / lineLengthInCharacters; // Division with round up.
 8000bca:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000bce:	f2a3 134d 	subw	r3, r3, #333	@ 0x14d
 8000bd2:	781a      	ldrb	r2, [r3, #0]
 8000bd4:	f897 3170 	ldrb.w	r3, [r7, #368]	@ 0x170
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	441a      	add	r2, r3
 8000bdc:	f897 3170 	ldrb.w	r3, [r7, #368]	@ 0x170
 8000be0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000be4:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
	uint8_t maxDisplayableCharactersOnScreen = lineLengthInCharacters * totalPages;
 8000be8:	f897 2170 	ldrb.w	r2, [r7, #368]	@ 0x170
 8000bec:	f897 313e 	ldrb.w	r3, [r7, #318]	@ 0x13e
 8000bf0:	fb12 f303 	smulbb	r3, r2, r3
 8000bf4:	f887 313d 	strb.w	r3, [r7, #317]	@ 0x13d

	uint8_t columnsAndPagesSetupCommands[] = {
 8000bf8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000bfc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000c00:	2221      	movs	r2, #33	@ 0x21
 8000c02:	701a      	strb	r2, [r3, #0]
		0x21, 		// Set columns starting coordinate.
		topLeftXCoordinateInCharacters * fontSize, (topLeftXCoordinateInCharacters + lineLengthInCharacters) * fontSize,
 8000c04:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000c08:	f5a3 73a7 	sub.w	r3, r3, #334	@ 0x14e
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8000c12:	fb12 f303 	smulbb	r3, r2, r3
 8000c16:	b2da      	uxtb	r2, r3
	uint8_t columnsAndPagesSetupCommands[] = {
 8000c18:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000c1c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000c20:	705a      	strb	r2, [r3, #1]
 8000c22:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000c26:	f5a3 73a7 	sub.w	r3, r3, #334	@ 0x14e
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	f897 3170 	ldrb.w	r3, [r7, #368]	@ 0x170
 8000c30:	4413      	add	r3, r2
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8000c38:	fb12 f303 	smulbb	r3, r2, r3
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000c42:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000c46:	709a      	strb	r2, [r3, #2]
 8000c48:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000c4c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000c50:	2222      	movs	r2, #34	@ 0x22
 8000c52:	70da      	strb	r2, [r3, #3]
 8000c54:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000c58:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000c5c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8000c60:	f2a2 124f 	subw	r2, r2, #335	@ 0x14f
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	711a      	strb	r2, [r3, #4]
		0x22,		// Set pages starting coordinate.
		topLeftYCoordinateInCharacters, totalPages - 1
 8000c68:	f897 313e 	ldrb.w	r3, [r7, #318]	@ 0x13e
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	b2da      	uxtb	r2, r3
	uint8_t columnsAndPagesSetupCommands[] = {
 8000c70:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000c74:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000c78:	715a      	strb	r2, [r3, #5]
	};
	writeSSD1306Commands(columnsAndPagesSetupCommands, 6, slaveAddress, I2CHandler);
 8000c7a:	f897 2174 	ldrb.w	r2, [r7, #372]	@ 0x174
 8000c7e:	f107 000c 	add.w	r0, r7, #12
 8000c82:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8000c86:	2106      	movs	r1, #6
 8000c88:	f7ff fe34 	bl	80008f4 <writeSSD1306Commands>

	if(messageLengthInCharacters > maxDisplayableCharactersOnScreen) {
 8000c8c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000c90:	f2a3 134d 	subw	r3, r3, #333	@ 0x14d
 8000c94:	781a      	ldrb	r2, [r3, #0]
 8000c96:	f897 313d 	ldrb.w	r3, [r7, #317]	@ 0x13d
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d906      	bls.n	8000cac <drawText+0x13c>
		messageLengthInCharacters = maxDisplayableCharactersOnScreen;
 8000c9e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000ca2:	f2a3 134d 	subw	r3, r3, #333	@ 0x14d
 8000ca6:	f897 213d 	ldrb.w	r2, [r7, #317]	@ 0x13d
 8000caa:	701a      	strb	r2, [r3, #0]
	}

	for(int page = 0; page < totalPages; page++) {
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000cb2:	e0f9      	b.n	8000ea8 <drawText+0x338>
 8000cb4:	466b      	mov	r3, sp
 8000cb6:	461e      	mov	r6, r3
		uint8_t pageData[lineLengthInCharacters * fontSize];
 8000cb8:	f897 3170 	ldrb.w	r3, [r7, #368]	@ 0x170
 8000cbc:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8000cc0:	fb02 f103 	mul.w	r1, r2, r3
 8000cc4:	1e4b      	subs	r3, r1, #1
 8000cc6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8000cca:	460a      	mov	r2, r1
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4614      	mov	r4, r2
 8000cd0:	461d      	mov	r5, r3
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	00eb      	lsls	r3, r5, #3
 8000cdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ce0:	00e2      	lsls	r2, r4, #3
 8000ce2:	460a      	mov	r2, r1
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4690      	mov	r8, r2
 8000ce8:	4699      	mov	r9, r3
 8000cea:	f04f 0200 	mov.w	r2, #0
 8000cee:	f04f 0300 	mov.w	r3, #0
 8000cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cfe:	460b      	mov	r3, r1
 8000d00:	3307      	adds	r3, #7
 8000d02:	08db      	lsrs	r3, r3, #3
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	ebad 0d03 	sub.w	sp, sp, r3
 8000d0a:	466b      	mov	r3, sp
 8000d0c:	3300      	adds	r3, #0
 8000d0e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

		for(int character = 0; character < lineLengthInCharacters; character++) {
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8000d18:	e0aa      	b.n	8000e70 <drawText+0x300>
			char currentCharacter = ' ';
 8000d1a:	2320      	movs	r3, #32
 8000d1c:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
			if(character + (lineLengthInCharacters * page) < messageLengthInCharacters) {
 8000d20:	f897 3170 	ldrb.w	r3, [r7, #368]	@ 0x170
 8000d24:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8000d28:	fb03 f202 	mul.w	r2, r3, r2
 8000d2c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000d30:	441a      	add	r2, r3
 8000d32:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d36:	f2a3 134d 	subw	r3, r3, #333	@ 0x14d
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	da12      	bge.n	8000d66 <drawText+0x1f6>
				currentCharacter = message[character + (lineLengthInCharacters * page)];
 8000d40:	f897 3170 	ldrb.w	r3, [r7, #368]	@ 0x170
 8000d44:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8000d48:	fb03 f202 	mul.w	r2, r3, r2
 8000d4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000d50:	4413      	add	r3, r2
 8000d52:	461a      	mov	r2, r3
 8000d54:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d58:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
			}

			for(int column = 0; column < fontSize; column++) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8000d6c:	e075      	b.n	8000e5a <drawText+0x2ea>
				if(currentCharacter == ' ') {
 8000d6e:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8000d72:	2b20      	cmp	r3, #32
 8000d74:	d115      	bne.n	8000da2 <drawText+0x232>
					pageData[column + (fontSize * character)] = characterBitMaps[26][column];
 8000d76:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8000d7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000d7e:	fb03 f202 	mul.w	r2, r3, r2
 8000d82:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000d86:	4413      	add	r3, r2
 8000d88:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8000d8c:	f5a2 719e 	sub.w	r1, r2, #316	@ 0x13c
 8000d90:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8000d94:	440a      	add	r2, r1
 8000d96:	32d0      	adds	r2, #208	@ 0xd0
 8000d98:	7811      	ldrb	r1, [r2, #0]
 8000d9a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8000d9e:	54d1      	strb	r1, [r2, r3]
					continue;
 8000da0:	e056      	b.n	8000e50 <drawText+0x2e0>
				}

				if(currentCharacter == 48) {
 8000da2:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8000da6:	2b30      	cmp	r3, #48	@ 0x30
 8000da8:	d115      	bne.n	8000dd6 <drawText+0x266>
					pageData[column + (fontSize * character)] = characterBitMaps[14][column];
 8000daa:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8000dae:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000db2:	fb03 f202 	mul.w	r2, r3, r2
 8000db6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000dba:	4413      	add	r3, r2
 8000dbc:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8000dc0:	f5a2 719e 	sub.w	r1, r2, #316	@ 0x13c
 8000dc4:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8000dc8:	440a      	add	r2, r1
 8000dca:	3270      	adds	r2, #112	@ 0x70
 8000dcc:	7811      	ldrb	r1, [r2, #0]
 8000dce:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8000dd2:	54d1      	strb	r1, [r2, r3]
					continue;
 8000dd4:	e03c      	b.n	8000e50 <drawText+0x2e0>
				}

				if(49 <= currentCharacter && currentCharacter <= 57) {
 8000dd6:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8000dda:	2b30      	cmp	r3, #48	@ 0x30
 8000ddc:	d91e      	bls.n	8000e1c <drawText+0x2ac>
 8000dde:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8000de2:	2b39      	cmp	r3, #57	@ 0x39
 8000de4:	d81a      	bhi.n	8000e1c <drawText+0x2ac>
					pageData[column + (fontSize * character)] = characterBitMaps[currentCharacter - 22][column];
 8000de6:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8000dea:	f1a3 0216 	sub.w	r2, r3, #22
 8000dee:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8000df2:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 8000df6:	fb03 f101 	mul.w	r1, r3, r1
 8000dfa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000dfe:	440b      	add	r3, r1
 8000e00:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8000e04:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8000e08:	00d2      	lsls	r2, r2, #3
 8000e0a:	4411      	add	r1, r2
 8000e0c:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8000e10:	440a      	add	r2, r1
 8000e12:	7811      	ldrb	r1, [r2, #0]
 8000e14:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8000e18:	54d1      	strb	r1, [r2, r3]
					continue;
 8000e1a:	e019      	b.n	8000e50 <drawText+0x2e0>
				}

				pageData[column + (fontSize * character)] = characterBitMaps[currentCharacter - 65][column];
 8000e1c:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8000e20:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8000e24:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8000e28:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 8000e2c:	fb03 f101 	mul.w	r1, r3, r1
 8000e30:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000e34:	440b      	add	r3, r1
 8000e36:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8000e3a:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8000e3e:	00d2      	lsls	r2, r2, #3
 8000e40:	4411      	add	r1, r2
 8000e42:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8000e46:	440a      	add	r2, r1
 8000e48:	7811      	ldrb	r1, [r2, #0]
 8000e4a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8000e4e:	54d1      	strb	r1, [r2, r3]
			for(int column = 0; column < fontSize; column++) {
 8000e50:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000e54:	3301      	adds	r3, #1
 8000e56:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8000e5a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8000e5e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8000e62:	429a      	cmp	r2, r3
 8000e64:	db83      	blt.n	8000d6e <drawText+0x1fe>
		for(int character = 0; character < lineLengthInCharacters; character++) {
 8000e66:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8000e70:	f897 3170 	ldrb.w	r3, [r7, #368]	@ 0x170
 8000e74:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f6ff af4e 	blt.w	8000d1a <drawText+0x1aa>
			}
		}

		writeSSD1306Data(pageData, (lineLengthInCharacters * fontSize), slaveAddress, I2CHandler);
 8000e7e:	f897 2170 	ldrb.w	r2, [r7, #368]	@ 0x170
 8000e82:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8000e86:	fb12 f303 	smulbb	r3, r2, r3
 8000e8a:	b2d9      	uxtb	r1, r3
 8000e8c:	f897 2174 	ldrb.w	r2, [r7, #372]	@ 0x174
 8000e90:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8000e94:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8000e98:	f7ff fd87 	bl	80009aa <writeSSD1306Data>
 8000e9c:	46b5      	mov	sp, r6
	for(int page = 0; page < totalPages; page++) {
 8000e9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000ea8:	f897 313e 	ldrb.w	r3, [r7, #318]	@ 0x13e
 8000eac:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f6ff aeff 	blt.w	8000cb4 <drawText+0x144>
	}
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ec4:	08003098 	.word	0x08003098

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <Error_Handler+0x8>

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f20 <HAL_MspInit+0x4c>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	4a08      	ldr	r2, [pc, #32]	@ (8000f20 <HAL_MspInit+0x4c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a19      	ldr	r2, [pc, #100]	@ (8000fa8 <HAL_I2C_MspInit+0x84>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d12c      	bne.n	8000fa0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a17      	ldr	r2, [pc, #92]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f68:	2312      	movs	r3, #18
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f74:	2304      	movs	r3, #4
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <HAL_I2C_MspInit+0x8c>)
 8000f80:	f000 fa7c 	bl	800147c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a07      	ldr	r2, [pc, #28]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	@ 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a19      	ldr	r2, [pc, #100]	@ (8001038 <HAL_UART_MspInit+0x84>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d12b      	bne.n	800102e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b18      	ldr	r3, [pc, #96]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	4a17      	ldr	r2, [pc, #92]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a10      	ldr	r2, [pc, #64]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <HAL_UART_MspInit+0x88>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800100e:	230c      	movs	r3, #12
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800101e:	2307      	movs	r3, #7
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <HAL_UART_MspInit+0x8c>)
 800102a:	f000 fa27 	bl	800147c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	@ 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40004400 	.word	0x40004400
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <NMI_Handler+0x4>

0800104c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <MemManage_Handler+0x4>

0800105c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <UsageFault_Handler+0x4>

0800106c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109a:	f000 f899 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010a6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010aa:	f000 fb85 	bl	80017b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001110 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010dc:	f7ff ffea 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	@ (8001114 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	@ (8001118 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	@ (800111c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001124 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001106:	f001 ff71 	bl	8002fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff f9f9 	bl	8000500 <main>
  bx  lr    
 800110e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001110:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800111c:	080031e0 	.word	0x080031e0
  ldr r2, =_sbss
 8001120:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001124:	200000cc 	.word	0x200000cc

08001128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001130:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0d      	ldr	r2, [pc, #52]	@ (800116c <HAL_Init+0x40>)
 8001136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800113a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <HAL_Init+0x40>)
 8001142:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	@ (800116c <HAL_Init+0x40>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f94f 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f808 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff feb8 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023c00 	.word	0x40023c00

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f967 	bl	8001462 <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f92f 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	@ (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	200000c8 	.word	0x200000c8

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	200000c8 	.word	0x200000c8

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff ffee 	bl	80011f8 <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_Delay+0x44>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffde 	bl	80011f8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008

08001258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128a:	4a04      	ldr	r2, [pc, #16]	@ (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	60d3      	str	r3, [r2, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	4907      	ldr	r1, [pc, #28]	@ (80012f4 <__NVIC_EnableIRQ+0x38>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	@ (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	@ (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	@ 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
         );
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	@ 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f7ff ff8e 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff29 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff3e 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff8e 	bl	800134c <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5d 	bl	80012f8 <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff31 	bl	80012bc <__NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffa2 	bl	80013b4 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	@ 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	e159      	b.n	800174c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8148 	bne.w	8001746 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d005      	beq.n	80014ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d130      	bne.n	8001530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001504:	2201      	movs	r2, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 0201 	and.w	r2, r3, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b03      	cmp	r3, #3
 800153a:	d017      	beq.n	800156c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d123      	bne.n	80015c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	69b9      	ldr	r1, [r7, #24]
 80015bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0203 	and.w	r2, r3, #3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a2 	beq.w	8001746 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b57      	ldr	r3, [pc, #348]	@ (8001764 <HAL_GPIO_Init+0x2e8>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	4a56      	ldr	r2, [pc, #344]	@ (8001764 <HAL_GPIO_Init+0x2e8>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001610:	6453      	str	r3, [r2, #68]	@ 0x44
 8001612:	4b54      	ldr	r3, [pc, #336]	@ (8001764 <HAL_GPIO_Init+0x2e8>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800161e:	4a52      	ldr	r2, [pc, #328]	@ (8001768 <HAL_GPIO_Init+0x2ec>)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a49      	ldr	r2, [pc, #292]	@ (800176c <HAL_GPIO_Init+0x2f0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d019      	beq.n	800167e <HAL_GPIO_Init+0x202>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a48      	ldr	r2, [pc, #288]	@ (8001770 <HAL_GPIO_Init+0x2f4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_GPIO_Init+0x1fe>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a47      	ldr	r2, [pc, #284]	@ (8001774 <HAL_GPIO_Init+0x2f8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00d      	beq.n	8001676 <HAL_GPIO_Init+0x1fa>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a46      	ldr	r2, [pc, #280]	@ (8001778 <HAL_GPIO_Init+0x2fc>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d007      	beq.n	8001672 <HAL_GPIO_Init+0x1f6>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a45      	ldr	r2, [pc, #276]	@ (800177c <HAL_GPIO_Init+0x300>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_GPIO_Init+0x1f2>
 800166a:	2304      	movs	r3, #4
 800166c:	e008      	b.n	8001680 <HAL_GPIO_Init+0x204>
 800166e:	2307      	movs	r3, #7
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x204>
 8001672:	2303      	movs	r3, #3
 8001674:	e004      	b.n	8001680 <HAL_GPIO_Init+0x204>
 8001676:	2302      	movs	r3, #2
 8001678:	e002      	b.n	8001680 <HAL_GPIO_Init+0x204>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_GPIO_Init+0x204>
 800167e:	2300      	movs	r3, #0
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	f002 0203 	and.w	r2, r2, #3
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	4093      	lsls	r3, r2
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001690:	4935      	ldr	r1, [pc, #212]	@ (8001768 <HAL_GPIO_Init+0x2ec>)
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	3302      	adds	r3, #2
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169e:	4b38      	ldr	r3, [pc, #224]	@ (8001780 <HAL_GPIO_Init+0x304>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001780 <HAL_GPIO_Init+0x304>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <HAL_GPIO_Init+0x304>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016ec:	4a24      	ldr	r2, [pc, #144]	@ (8001780 <HAL_GPIO_Init+0x304>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016f2:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <HAL_GPIO_Init+0x304>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001716:	4a1a      	ldr	r2, [pc, #104]	@ (8001780 <HAL_GPIO_Init+0x304>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800171c:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <HAL_GPIO_Init+0x304>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001740:	4a0f      	ldr	r2, [pc, #60]	@ (8001780 <HAL_GPIO_Init+0x304>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3301      	adds	r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	2b0f      	cmp	r3, #15
 8001750:	f67f aea2 	bls.w	8001498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3724      	adds	r7, #36	@ 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40013800 	.word	0x40013800
 800176c:	40020000 	.word	0x40020000
 8001770:	40020400 	.word	0x40020400
 8001774:	40020800 	.word	0x40020800
 8001778:	40020c00 	.word	0x40020c00
 800177c:	40021000 	.word	0x40021000
 8001780:	40013c00 	.word	0x40013c00

08001784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
 8001790:	4613      	mov	r3, r2
 8001792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001794:	787b      	ldrb	r3, [r7, #1]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017a0:	e003      	b.n	80017aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	619a      	str	r2, [r3, #24]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017c2:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f866 	bl	80008a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40013c00 	.word	0x40013c00

080017e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e12b      	b.n	8001a52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d106      	bne.n	8001814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fb88 	bl	8000f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2224      	movs	r2, #36	@ 0x24
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0201 	bic.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800183a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800184a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800184c:	f001 f8da 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 8001850:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4a81      	ldr	r2, [pc, #516]	@ (8001a5c <HAL_I2C_Init+0x274>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d807      	bhi.n	800186c <HAL_I2C_Init+0x84>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4a80      	ldr	r2, [pc, #512]	@ (8001a60 <HAL_I2C_Init+0x278>)
 8001860:	4293      	cmp	r3, r2
 8001862:	bf94      	ite	ls
 8001864:	2301      	movls	r3, #1
 8001866:	2300      	movhi	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	e006      	b.n	800187a <HAL_I2C_Init+0x92>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a64 <HAL_I2C_Init+0x27c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	bf94      	ite	ls
 8001874:	2301      	movls	r3, #1
 8001876:	2300      	movhi	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0e7      	b.n	8001a52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4a78      	ldr	r2, [pc, #480]	@ (8001a68 <HAL_I2C_Init+0x280>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	0c9b      	lsrs	r3, r3, #18
 800188c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	430a      	orrs	r2, r1
 80018a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a6a      	ldr	r2, [pc, #424]	@ (8001a5c <HAL_I2C_Init+0x274>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d802      	bhi.n	80018bc <HAL_I2C_Init+0xd4>
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	3301      	adds	r3, #1
 80018ba:	e009      	b.n	80018d0 <HAL_I2C_Init+0xe8>
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	4a69      	ldr	r2, [pc, #420]	@ (8001a6c <HAL_I2C_Init+0x284>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	3301      	adds	r3, #1
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	430b      	orrs	r3, r1
 80018d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	495c      	ldr	r1, [pc, #368]	@ (8001a5c <HAL_I2C_Init+0x274>)
 80018ec:	428b      	cmp	r3, r1
 80018ee:	d819      	bhi.n	8001924 <HAL_I2C_Init+0x13c>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e59      	subs	r1, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80018fe:	1c59      	adds	r1, r3, #1
 8001900:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001904:	400b      	ands	r3, r1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00a      	beq.n	8001920 <HAL_I2C_Init+0x138>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1e59      	subs	r1, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fbb1 f3f3 	udiv	r3, r1, r3
 8001918:	3301      	adds	r3, #1
 800191a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191e:	e051      	b.n	80019c4 <HAL_I2C_Init+0x1dc>
 8001920:	2304      	movs	r3, #4
 8001922:	e04f      	b.n	80019c4 <HAL_I2C_Init+0x1dc>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d111      	bne.n	8001950 <HAL_I2C_Init+0x168>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1e58      	subs	r0, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	440b      	add	r3, r1
 800193a:	fbb0 f3f3 	udiv	r3, r0, r3
 800193e:	3301      	adds	r3, #1
 8001940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf0c      	ite	eq
 8001948:	2301      	moveq	r3, #1
 800194a:	2300      	movne	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	e012      	b.n	8001976 <HAL_I2C_Init+0x18e>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1e58      	subs	r0, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	0099      	lsls	r1, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	fbb0 f3f3 	udiv	r3, r0, r3
 8001966:	3301      	adds	r3, #1
 8001968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_Init+0x196>
 800197a:	2301      	movs	r3, #1
 800197c:	e022      	b.n	80019c4 <HAL_I2C_Init+0x1dc>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10e      	bne.n	80019a4 <HAL_I2C_Init+0x1bc>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1e58      	subs	r0, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6859      	ldr	r1, [r3, #4]
 800198e:	460b      	mov	r3, r1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	440b      	add	r3, r1
 8001994:	fbb0 f3f3 	udiv	r3, r0, r3
 8001998:	3301      	adds	r3, #1
 800199a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019a2:	e00f      	b.n	80019c4 <HAL_I2C_Init+0x1dc>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1e58      	subs	r0, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	0099      	lsls	r1, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	6809      	ldr	r1, [r1, #0]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69da      	ldr	r2, [r3, #28]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6911      	ldr	r1, [r2, #16]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68d2      	ldr	r2, [r2, #12]
 80019fe:	4311      	orrs	r1, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	430b      	orrs	r3, r1
 8001a06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0201 	orr.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	000186a0 	.word	0x000186a0
 8001a60:	001e847f 	.word	0x001e847f
 8001a64:	003d08ff 	.word	0x003d08ff
 8001a68:	431bde83 	.word	0x431bde83
 8001a6c:	10624dd3 	.word	0x10624dd3

08001a70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	817b      	strh	r3, [r7, #10]
 8001a80:	4613      	mov	r3, r2
 8001a82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a84:	f7ff fbb8 	bl	80011f8 <HAL_GetTick>
 8001a88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	f040 80e0 	bne.w	8001c58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2319      	movs	r3, #25
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4970      	ldr	r1, [pc, #448]	@ (8001c64 <HAL_I2C_Master_Transmit+0x1f4>)
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f964 	bl	8001d70 <I2C_WaitOnFlagUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e0d3      	b.n	8001c5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_I2C_Master_Transmit+0x50>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e0cc      	b.n	8001c5a <HAL_I2C_Master_Transmit+0x1ea>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d007      	beq.n	8001ae6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0201 	orr.w	r2, r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001af4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2221      	movs	r2, #33	@ 0x21
 8001afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2210      	movs	r2, #16
 8001b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	893a      	ldrh	r2, [r7, #8]
 8001b16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4a50      	ldr	r2, [pc, #320]	@ (8001c68 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b28:	8979      	ldrh	r1, [r7, #10]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	6a3a      	ldr	r2, [r7, #32]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 f89c 	bl	8001c6c <I2C_MasterRequestWrite>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e08d      	b.n	8001c5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b54:	e066      	b.n	8001c24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	6a39      	ldr	r1, [r7, #32]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 fa22 	bl	8001fa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00d      	beq.n	8001b82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d107      	bne.n	8001b7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e06b      	b.n	8001c5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d11b      	bne.n	8001bf8 <HAL_I2C_Master_Transmit+0x188>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d017      	beq.n	8001bf8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bcc:	781a      	ldrb	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	6a39      	ldr	r1, [r7, #32]
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 fa19 	bl	8002034 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00d      	beq.n	8001c24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d107      	bne.n	8001c20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e01a      	b.n	8001c5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d194      	bne.n	8001b56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e000      	b.n	8001c5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c58:	2302      	movs	r3, #2
  }
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	00100002 	.word	0x00100002
 8001c68:	ffff0000 	.word	0xffff0000

08001c6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d006      	beq.n	8001c96 <I2C_MasterRequestWrite+0x2a>
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d003      	beq.n	8001c96 <I2C_MasterRequestWrite+0x2a>
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c94:	d108      	bne.n	8001ca8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e00b      	b.n	8001cc0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cac:	2b12      	cmp	r3, #18
 8001cae:	d107      	bne.n	8001cc0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f84f 	bl	8001d70 <I2C_WaitOnFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00d      	beq.n	8001cf4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ce6:	d103      	bne.n	8001cf0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e035      	b.n	8001d60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cfc:	d108      	bne.n	8001d10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d0c:	611a      	str	r2, [r3, #16]
 8001d0e:	e01b      	b.n	8001d48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d10:	897b      	ldrh	r3, [r7, #10]
 8001d12:	11db      	asrs	r3, r3, #7
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f003 0306 	and.w	r3, r3, #6
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f063 030f 	orn	r3, r3, #15
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	490e      	ldr	r1, [pc, #56]	@ (8001d68 <I2C_MasterRequestWrite+0xfc>)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f898 	bl	8001e64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e010      	b.n	8001d60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d3e:	897b      	ldrh	r3, [r7, #10]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4907      	ldr	r1, [pc, #28]	@ (8001d6c <I2C_MasterRequestWrite+0x100>)
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 f888 	bl	8001e64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	00010008 	.word	0x00010008
 8001d6c:	00010002 	.word	0x00010002

08001d70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d80:	e048      	b.n	8001e14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d044      	beq.n	8001e14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d8a:	f7ff fa35 	bl	80011f8 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d302      	bcc.n	8001da0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d139      	bne.n	8001e14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	0c1b      	lsrs	r3, r3, #16
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d10d      	bne.n	8001dc6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	43da      	mvns	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	4013      	ands	r3, r2
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	e00c      	b.n	8001de0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d116      	bne.n	8001e14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	f043 0220 	orr.w	r2, r3, #32
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e023      	b.n	8001e5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10d      	bne.n	8001e3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	43da      	mvns	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	e00c      	b.n	8001e54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	43da      	mvns	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	4013      	ands	r3, r2
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d093      	beq.n	8001d82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e72:	e071      	b.n	8001f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e82:	d123      	bne.n	8001ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	f043 0204 	orr.w	r2, r3, #4
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e067      	b.n	8001f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed2:	d041      	beq.n	8001f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed4:	f7ff f990 	bl	80011f8 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d302      	bcc.n	8001eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d136      	bne.n	8001f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d10c      	bne.n	8001f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4013      	ands	r3, r2
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf14      	ite	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	2300      	moveq	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	e00b      	b.n	8001f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	43da      	mvns	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf14      	ite	ne
 8001f20:	2301      	movne	r3, #1
 8001f22:	2300      	moveq	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d016      	beq.n	8001f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f043 0220 	orr.w	r2, r3, #32
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e021      	b.n	8001f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	0c1b      	lsrs	r3, r3, #16
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d10c      	bne.n	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	43da      	mvns	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	e00b      	b.n	8001f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4013      	ands	r3, r2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf14      	ite	ne
 8001f8e:	2301      	movne	r3, #1
 8001f90:	2300      	moveq	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f47f af6d 	bne.w	8001e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fb0:	e034      	b.n	800201c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f886 	bl	80020c4 <I2C_IsAcknowledgeFailed>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e034      	b.n	800202c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d028      	beq.n	800201c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fca:	f7ff f915 	bl	80011f8 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d302      	bcc.n	8001fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d11d      	bne.n	800201c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fea:	2b80      	cmp	r3, #128	@ 0x80
 8001fec:	d016      	beq.n	800201c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	f043 0220 	orr.w	r2, r3, #32
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e007      	b.n	800202c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002026:	2b80      	cmp	r3, #128	@ 0x80
 8002028:	d1c3      	bne.n	8001fb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002040:	e034      	b.n	80020ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f83e 	bl	80020c4 <I2C_IsAcknowledgeFailed>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e034      	b.n	80020bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d028      	beq.n	80020ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205a:	f7ff f8cd 	bl	80011f8 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	429a      	cmp	r2, r3
 8002068:	d302      	bcc.n	8002070 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d11d      	bne.n	80020ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b04      	cmp	r3, #4
 800207c:	d016      	beq.n	80020ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e007      	b.n	80020bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d1c3      	bne.n	8002042 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020da:	d11b      	bne.n	8002114 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f043 0204 	orr.w	r2, r3, #4
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e267      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d075      	beq.n	800222e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002142:	4b88      	ldr	r3, [pc, #544]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b04      	cmp	r3, #4
 800214c:	d00c      	beq.n	8002168 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214e:	4b85      	ldr	r3, [pc, #532]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002156:	2b08      	cmp	r3, #8
 8002158:	d112      	bne.n	8002180 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800215a:	4b82      	ldr	r3, [pc, #520]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002162:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002166:	d10b      	bne.n	8002180 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	4b7e      	ldr	r3, [pc, #504]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d05b      	beq.n	800222c <HAL_RCC_OscConfig+0x108>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d157      	bne.n	800222c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e242      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002188:	d106      	bne.n	8002198 <HAL_RCC_OscConfig+0x74>
 800218a:	4b76      	ldr	r3, [pc, #472]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a75      	ldr	r2, [pc, #468]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e01d      	b.n	80021d4 <HAL_RCC_OscConfig+0xb0>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0x98>
 80021a2:	4b70      	ldr	r3, [pc, #448]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 80021a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0xb0>
 80021bc:	4b69      	ldr	r3, [pc, #420]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a68      	ldr	r2, [pc, #416]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 80021c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b66      	ldr	r3, [pc, #408]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a65      	ldr	r2, [pc, #404]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff f80c 	bl	80011f8 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7ff f808 	bl	80011f8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e207      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0xc0>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7fe fff8 	bl	80011f8 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7fe fff4 	bl	80011f8 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	@ 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e1f3      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	4b51      	ldr	r3, [pc, #324]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0xe8>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d063      	beq.n	8002302 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800223a:	4b4a      	ldr	r3, [pc, #296]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00b      	beq.n	800225e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002246:	4b47      	ldr	r3, [pc, #284]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800224e:	2b08      	cmp	r3, #8
 8002250:	d11c      	bne.n	800228c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002252:	4b44      	ldr	r3, [pc, #272]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d116      	bne.n	800228c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225e:	4b41      	ldr	r3, [pc, #260]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x152>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d001      	beq.n	8002276 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e1c7      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	4b3b      	ldr	r3, [pc, #236]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4937      	ldr	r1, [pc, #220]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	e03a      	b.n	8002302 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d020      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002294:	4b34      	ldr	r3, [pc, #208]	@ (8002368 <HAL_RCC_OscConfig+0x244>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7fe ffad 	bl	80011f8 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a2:	f7fe ffa9 	bl	80011f8 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e1a8      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c0:	4b28      	ldr	r3, [pc, #160]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4925      	ldr	r1, [pc, #148]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]
 80022d4:	e015      	b.n	8002302 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d6:	4b24      	ldr	r3, [pc, #144]	@ (8002368 <HAL_RCC_OscConfig+0x244>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7fe ff8c 	bl	80011f8 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e4:	f7fe ff88 	bl	80011f8 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e187      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d036      	beq.n	800237c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d016      	beq.n	8002344 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002316:	4b15      	ldr	r3, [pc, #84]	@ (800236c <HAL_RCC_OscConfig+0x248>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231c:	f7fe ff6c 	bl	80011f8 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7fe ff68 	bl	80011f8 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e167      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <HAL_RCC_OscConfig+0x240>)
 8002338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x200>
 8002342:	e01b      	b.n	800237c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002344:	4b09      	ldr	r3, [pc, #36]	@ (800236c <HAL_RCC_OscConfig+0x248>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234a:	f7fe ff55 	bl	80011f8 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002350:	e00e      	b.n	8002370 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002352:	f7fe ff51 	bl	80011f8 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d907      	bls.n	8002370 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e150      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
 8002364:	40023800 	.word	0x40023800
 8002368:	42470000 	.word	0x42470000
 800236c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002370:	4b88      	ldr	r3, [pc, #544]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 8002372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1ea      	bne.n	8002352 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8097 	beq.w	80024b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238e:	4b81      	ldr	r3, [pc, #516]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10f      	bne.n	80023ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	4b7d      	ldr	r3, [pc, #500]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b6:	2301      	movs	r3, #1
 80023b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	4b77      	ldr	r3, [pc, #476]	@ (8002598 <HAL_RCC_OscConfig+0x474>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d118      	bne.n	80023f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c6:	4b74      	ldr	r3, [pc, #464]	@ (8002598 <HAL_RCC_OscConfig+0x474>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a73      	ldr	r2, [pc, #460]	@ (8002598 <HAL_RCC_OscConfig+0x474>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d2:	f7fe ff11 	bl	80011f8 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023da:	f7fe ff0d 	bl	80011f8 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e10c      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002598 <HAL_RCC_OscConfig+0x474>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d106      	bne.n	800240e <HAL_RCC_OscConfig+0x2ea>
 8002400:	4b64      	ldr	r3, [pc, #400]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002404:	4a63      	ldr	r2, [pc, #396]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6713      	str	r3, [r2, #112]	@ 0x70
 800240c:	e01c      	b.n	8002448 <HAL_RCC_OscConfig+0x324>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b05      	cmp	r3, #5
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0x30c>
 8002416:	4b5f      	ldr	r3, [pc, #380]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241a:	4a5e      	ldr	r2, [pc, #376]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	6713      	str	r3, [r2, #112]	@ 0x70
 8002422:	4b5c      	ldr	r3, [pc, #368]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002426:	4a5b      	ldr	r2, [pc, #364]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6713      	str	r3, [r2, #112]	@ 0x70
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0x324>
 8002430:	4b58      	ldr	r3, [pc, #352]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002434:	4a57      	ldr	r2, [pc, #348]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 8002436:	f023 0301 	bic.w	r3, r3, #1
 800243a:	6713      	str	r3, [r2, #112]	@ 0x70
 800243c:	4b55      	ldr	r3, [pc, #340]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002440:	4a54      	ldr	r2, [pc, #336]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 8002442:	f023 0304 	bic.w	r3, r3, #4
 8002446:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d015      	beq.n	800247c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7fe fed2 	bl	80011f8 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002456:	e00a      	b.n	800246e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002458:	f7fe fece 	bl	80011f8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e0cb      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246e:	4b49      	ldr	r3, [pc, #292]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0ee      	beq.n	8002458 <HAL_RCC_OscConfig+0x334>
 800247a:	e014      	b.n	80024a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247c:	f7fe febc 	bl	80011f8 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002482:	e00a      	b.n	800249a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002484:	f7fe feb8 	bl	80011f8 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e0b5      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249a:	4b3e      	ldr	r3, [pc, #248]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1ee      	bne.n	8002484 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d105      	bne.n	80024b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ac:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	4a38      	ldr	r2, [pc, #224]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 80024b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80a1 	beq.w	8002604 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024c2:	4b34      	ldr	r3, [pc, #208]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d05c      	beq.n	8002588 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d141      	bne.n	800255a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b31      	ldr	r3, [pc, #196]	@ (800259c <HAL_RCC_OscConfig+0x478>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fe8c 	bl	80011f8 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fe88 	bl	80011f8 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e087      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	4b27      	ldr	r3, [pc, #156]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69da      	ldr	r2, [r3, #28]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	019b      	lsls	r3, r3, #6
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	3b01      	subs	r3, #1
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	491b      	ldr	r1, [pc, #108]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252c:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_RCC_OscConfig+0x478>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7fe fe61 	bl	80011f8 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7fe fe5d 	bl	80011f8 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e05c      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x416>
 8002558:	e054      	b.n	8002604 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_RCC_OscConfig+0x478>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fe4a 	bl	80011f8 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fe46 	bl	80011f8 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e045      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_RCC_OscConfig+0x470>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x444>
 8002586:	e03d      	b.n	8002604 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e038      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
 8002594:	40023800 	.word	0x40023800
 8002598:	40007000 	.word	0x40007000
 800259c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002610 <HAL_RCC_OscConfig+0x4ec>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d028      	beq.n	8002600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d121      	bne.n	8002600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d11a      	bne.n	8002600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025d0:	4013      	ands	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d8:	4293      	cmp	r3, r2
 80025da:	d111      	bne.n	8002600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	3b01      	subs	r3, #1
 80025ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800

08002614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0cc      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002628:	4b68      	ldr	r3, [pc, #416]	@ (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d90c      	bls.n	8002650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b65      	ldr	r3, [pc, #404]	@ (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b63      	ldr	r3, [pc, #396]	@ (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0b8      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002668:	4b59      	ldr	r3, [pc, #356]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a58      	ldr	r2, [pc, #352]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002672:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002680:	4b53      	ldr	r3, [pc, #332]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a52      	ldr	r2, [pc, #328]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800268a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268c:	4b50      	ldr	r3, [pc, #320]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	494d      	ldr	r1, [pc, #308]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d044      	beq.n	8002734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	4b47      	ldr	r3, [pc, #284]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d119      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e07f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d003      	beq.n	80026d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d2:	4b3f      	ldr	r3, [pc, #252]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e06f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e2:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e067      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f2:	4b37      	ldr	r3, [pc, #220]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f023 0203 	bic.w	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4934      	ldr	r1, [pc, #208]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	4313      	orrs	r3, r2
 8002702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002704:	f7fe fd78 	bl	80011f8 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	e00a      	b.n	8002722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270c:	f7fe fd74 	bl	80011f8 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e04f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	4b2b      	ldr	r3, [pc, #172]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 020c 	and.w	r2, r3, #12
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	429a      	cmp	r2, r3
 8002732:	d1eb      	bne.n	800270c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002734:	4b25      	ldr	r3, [pc, #148]	@ (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d20c      	bcs.n	800275c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b22      	ldr	r3, [pc, #136]	@ (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e032      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4916      	ldr	r1, [pc, #88]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002786:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	490e      	ldr	r1, [pc, #56]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800279a:	f000 f821 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	490a      	ldr	r1, [pc, #40]	@ (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	5ccb      	ldrb	r3, [r1, r3]
 80027ae:	fa22 f303 	lsr.w	r3, r2, r3
 80027b2:	4a09      	ldr	r2, [pc, #36]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fcd8 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023c00 	.word	0x40023c00
 80027d0:	40023800 	.word	0x40023800
 80027d4:	080031b8 	.word	0x080031b8
 80027d8:	20000000 	.word	0x20000000
 80027dc:	20000004 	.word	0x20000004

080027e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e4:	b094      	sub	sp, #80	@ 0x50
 80027e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027f8:	4b79      	ldr	r3, [pc, #484]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d00d      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x40>
 8002804:	2b08      	cmp	r3, #8
 8002806:	f200 80e1 	bhi.w	80029cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x34>
 800280e:	2b04      	cmp	r3, #4
 8002810:	d003      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x3a>
 8002812:	e0db      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002814:	4b73      	ldr	r3, [pc, #460]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002816:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002818:	e0db      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800281a:	4b73      	ldr	r3, [pc, #460]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800281c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800281e:	e0d8      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002820:	4b6f      	ldr	r3, [pc, #444]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002828:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800282a:	4b6d      	ldr	r3, [pc, #436]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d063      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002836:	4b6a      	ldr	r3, [pc, #424]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	099b      	lsrs	r3, r3, #6
 800283c:	2200      	movs	r2, #0
 800283e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002840:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002848:	633b      	str	r3, [r7, #48]	@ 0x30
 800284a:	2300      	movs	r3, #0
 800284c:	637b      	str	r3, [r7, #52]	@ 0x34
 800284e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002852:	4622      	mov	r2, r4
 8002854:	462b      	mov	r3, r5
 8002856:	f04f 0000 	mov.w	r0, #0
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	0159      	lsls	r1, r3, #5
 8002860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002864:	0150      	lsls	r0, r2, #5
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4621      	mov	r1, r4
 800286c:	1a51      	subs	r1, r2, r1
 800286e:	6139      	str	r1, [r7, #16]
 8002870:	4629      	mov	r1, r5
 8002872:	eb63 0301 	sbc.w	r3, r3, r1
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002884:	4659      	mov	r1, fp
 8002886:	018b      	lsls	r3, r1, #6
 8002888:	4651      	mov	r1, sl
 800288a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288e:	4651      	mov	r1, sl
 8002890:	018a      	lsls	r2, r1, #6
 8002892:	4651      	mov	r1, sl
 8002894:	ebb2 0801 	subs.w	r8, r2, r1
 8002898:	4659      	mov	r1, fp
 800289a:	eb63 0901 	sbc.w	r9, r3, r1
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028b2:	4690      	mov	r8, r2
 80028b4:	4699      	mov	r9, r3
 80028b6:	4623      	mov	r3, r4
 80028b8:	eb18 0303 	adds.w	r3, r8, r3
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	462b      	mov	r3, r5
 80028c0:	eb49 0303 	adc.w	r3, r9, r3
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028d2:	4629      	mov	r1, r5
 80028d4:	024b      	lsls	r3, r1, #9
 80028d6:	4621      	mov	r1, r4
 80028d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028dc:	4621      	mov	r1, r4
 80028de:	024a      	lsls	r2, r1, #9
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028e6:	2200      	movs	r2, #0
 80028e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028f0:	f7fd fc70 	bl	80001d4 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4613      	mov	r3, r2
 80028fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028fc:	e058      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b38      	ldr	r3, [pc, #224]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	2200      	movs	r2, #0
 8002906:	4618      	mov	r0, r3
 8002908:	4611      	mov	r1, r2
 800290a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800290e:	623b      	str	r3, [r7, #32]
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
 8002914:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002918:	4642      	mov	r2, r8
 800291a:	464b      	mov	r3, r9
 800291c:	f04f 0000 	mov.w	r0, #0
 8002920:	f04f 0100 	mov.w	r1, #0
 8002924:	0159      	lsls	r1, r3, #5
 8002926:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292a:	0150      	lsls	r0, r2, #5
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4641      	mov	r1, r8
 8002932:	ebb2 0a01 	subs.w	sl, r2, r1
 8002936:	4649      	mov	r1, r9
 8002938:	eb63 0b01 	sbc.w	fp, r3, r1
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002948:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800294c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002950:	ebb2 040a 	subs.w	r4, r2, sl
 8002954:	eb63 050b 	sbc.w	r5, r3, fp
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	00eb      	lsls	r3, r5, #3
 8002962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002966:	00e2      	lsls	r2, r4, #3
 8002968:	4614      	mov	r4, r2
 800296a:	461d      	mov	r5, r3
 800296c:	4643      	mov	r3, r8
 800296e:	18e3      	adds	r3, r4, r3
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	464b      	mov	r3, r9
 8002974:	eb45 0303 	adc.w	r3, r5, r3
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002986:	4629      	mov	r1, r5
 8002988:	028b      	lsls	r3, r1, #10
 800298a:	4621      	mov	r1, r4
 800298c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002990:	4621      	mov	r1, r4
 8002992:	028a      	lsls	r2, r1, #10
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800299a:	2200      	movs	r2, #0
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	61fa      	str	r2, [r7, #28]
 80029a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029a4:	f7fd fc16 	bl	80001d4 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4613      	mov	r3, r2
 80029ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029b0:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	3301      	adds	r3, #1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80029c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029ca:	e002      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3750      	adds	r7, #80	@ 0x50
 80029d8:	46bd      	mov	sp, r7
 80029da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	00f42400 	.word	0x00f42400
 80029e8:	007a1200 	.word	0x007a1200

080029ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f0:	4b03      	ldr	r3, [pc, #12]	@ (8002a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000000 	.word	0x20000000

08002a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a08:	f7ff fff0 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	0a9b      	lsrs	r3, r3, #10
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	4903      	ldr	r1, [pc, #12]	@ (8002a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	080031c8 	.word	0x080031c8

08002a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a30:	f7ff ffdc 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	0b5b      	lsrs	r3, r3, #13
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	4903      	ldr	r1, [pc, #12]	@ (8002a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	080031c8 	.word	0x080031c8

08002a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e042      	b.n	8002aec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe fa9a 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2224      	movs	r2, #36	@ 0x24
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f82b 	bl	8002af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af8:	b0c0      	sub	sp, #256	@ 0x100
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b10:	68d9      	ldr	r1, [r3, #12]
 8002b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	ea40 0301 	orr.w	r3, r0, r1
 8002b1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b4c:	f021 010c 	bic.w	r1, r1, #12
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6e:	6999      	ldr	r1, [r3, #24]
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	ea40 0301 	orr.w	r3, r0, r1
 8002b7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4b8f      	ldr	r3, [pc, #572]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d005      	beq.n	8002b94 <UART_SetConfig+0xa0>
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b8d      	ldr	r3, [pc, #564]	@ (8002dc4 <UART_SetConfig+0x2d0>)
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d104      	bne.n	8002b9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b94:	f7ff ff4a 	bl	8002a2c <HAL_RCC_GetPCLK2Freq>
 8002b98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b9c:	e003      	b.n	8002ba6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b9e:	f7ff ff31 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 8002ba2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bb0:	f040 810c 	bne.w	8002dcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002bc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	462b      	mov	r3, r5
 8002bca:	1891      	adds	r1, r2, r2
 8002bcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002bce:	415b      	adcs	r3, r3
 8002bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	eb12 0801 	adds.w	r8, r2, r1
 8002bdc:	4629      	mov	r1, r5
 8002bde:	eb43 0901 	adc.w	r9, r3, r1
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf6:	4690      	mov	r8, r2
 8002bf8:	4699      	mov	r9, r3
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	eb18 0303 	adds.w	r3, r8, r3
 8002c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c04:	462b      	mov	r3, r5
 8002c06:	eb49 0303 	adc.w	r3, r9, r3
 8002c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c22:	460b      	mov	r3, r1
 8002c24:	18db      	adds	r3, r3, r3
 8002c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c28:	4613      	mov	r3, r2
 8002c2a:	eb42 0303 	adc.w	r3, r2, r3
 8002c2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c38:	f7fd facc 	bl	80001d4 <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4b61      	ldr	r3, [pc, #388]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002c42:	fba3 2302 	umull	r2, r3, r3, r2
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	011c      	lsls	r4, r3, #4
 8002c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	1891      	adds	r1, r2, r2
 8002c62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c64:	415b      	adcs	r3, r3
 8002c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	eb12 0a01 	adds.w	sl, r2, r1
 8002c72:	4649      	mov	r1, r9
 8002c74:	eb43 0b01 	adc.w	fp, r3, r1
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c8c:	4692      	mov	sl, r2
 8002c8e:	469b      	mov	fp, r3
 8002c90:	4643      	mov	r3, r8
 8002c92:	eb1a 0303 	adds.w	r3, sl, r3
 8002c96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	eb4b 0303 	adc.w	r3, fp, r3
 8002ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002cb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	18db      	adds	r3, r3, r3
 8002cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	eb42 0303 	adc.w	r3, r2, r3
 8002cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002cca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002cce:	f7fd fa81 	bl	80001d4 <__aeabi_uldivmod>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002cda:	fba3 2301 	umull	r2, r3, r3, r1
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2264      	movs	r2, #100	@ 0x64
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	1acb      	subs	r3, r1, r3
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002cee:	4b36      	ldr	r3, [pc, #216]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002cfc:	441c      	add	r4, r3
 8002cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d10:	4642      	mov	r2, r8
 8002d12:	464b      	mov	r3, r9
 8002d14:	1891      	adds	r1, r2, r2
 8002d16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d18:	415b      	adcs	r3, r3
 8002d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d20:	4641      	mov	r1, r8
 8002d22:	1851      	adds	r1, r2, r1
 8002d24:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d26:	4649      	mov	r1, r9
 8002d28:	414b      	adcs	r3, r1
 8002d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d38:	4659      	mov	r1, fp
 8002d3a:	00cb      	lsls	r3, r1, #3
 8002d3c:	4651      	mov	r1, sl
 8002d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d42:	4651      	mov	r1, sl
 8002d44:	00ca      	lsls	r2, r1, #3
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	189b      	adds	r3, r3, r2
 8002d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d54:	464b      	mov	r3, r9
 8002d56:	460a      	mov	r2, r1
 8002d58:	eb42 0303 	adc.w	r3, r2, r3
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d74:	460b      	mov	r3, r1
 8002d76:	18db      	adds	r3, r3, r3
 8002d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	eb42 0303 	adc.w	r3, r2, r3
 8002d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d8a:	f7fd fa23 	bl	80001d4 <__aeabi_uldivmod>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002d94:	fba3 1302 	umull	r1, r3, r3, r2
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	2164      	movs	r1, #100	@ 0x64
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	3332      	adds	r3, #50	@ 0x32
 8002da6:	4a08      	ldr	r2, [pc, #32]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	f003 0207 	and.w	r2, r3, #7
 8002db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4422      	add	r2, r4
 8002dba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dbc:	e106      	b.n	8002fcc <UART_SetConfig+0x4d8>
 8002dbe:	bf00      	nop
 8002dc0:	40011000 	.word	0x40011000
 8002dc4:	40011400 	.word	0x40011400
 8002dc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002dd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002dda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002dde:	4642      	mov	r2, r8
 8002de0:	464b      	mov	r3, r9
 8002de2:	1891      	adds	r1, r2, r2
 8002de4:	6239      	str	r1, [r7, #32]
 8002de6:	415b      	adcs	r3, r3
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dee:	4641      	mov	r1, r8
 8002df0:	1854      	adds	r4, r2, r1
 8002df2:	4649      	mov	r1, r9
 8002df4:	eb43 0501 	adc.w	r5, r3, r1
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	00eb      	lsls	r3, r5, #3
 8002e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e06:	00e2      	lsls	r2, r4, #3
 8002e08:	4614      	mov	r4, r2
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	4643      	mov	r3, r8
 8002e0e:	18e3      	adds	r3, r4, r3
 8002e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e14:	464b      	mov	r3, r9
 8002e16:	eb45 0303 	adc.w	r3, r5, r3
 8002e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	008b      	lsls	r3, r1, #2
 8002e3e:	4621      	mov	r1, r4
 8002e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e44:	4621      	mov	r1, r4
 8002e46:	008a      	lsls	r2, r1, #2
 8002e48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e4c:	f7fd f9c2 	bl	80001d4 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4b60      	ldr	r3, [pc, #384]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002e56:	fba3 2302 	umull	r2, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	011c      	lsls	r4, r3, #4
 8002e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e70:	4642      	mov	r2, r8
 8002e72:	464b      	mov	r3, r9
 8002e74:	1891      	adds	r1, r2, r2
 8002e76:	61b9      	str	r1, [r7, #24]
 8002e78:	415b      	adcs	r3, r3
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e80:	4641      	mov	r1, r8
 8002e82:	1851      	adds	r1, r2, r1
 8002e84:	6139      	str	r1, [r7, #16]
 8002e86:	4649      	mov	r1, r9
 8002e88:	414b      	adcs	r3, r1
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e98:	4659      	mov	r1, fp
 8002e9a:	00cb      	lsls	r3, r1, #3
 8002e9c:	4651      	mov	r1, sl
 8002e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	00ca      	lsls	r2, r1, #3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4642      	mov	r2, r8
 8002eae:	189b      	adds	r3, r3, r2
 8002eb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002eb4:	464b      	mov	r3, r9
 8002eb6:	460a      	mov	r2, r1
 8002eb8:	eb42 0303 	adc.w	r3, r2, r3
 8002ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002eca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ed8:	4649      	mov	r1, r9
 8002eda:	008b      	lsls	r3, r1, #2
 8002edc:	4641      	mov	r1, r8
 8002ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ee2:	4641      	mov	r1, r8
 8002ee4:	008a      	lsls	r2, r1, #2
 8002ee6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002eea:	f7fd f973 	bl	80001d4 <__aeabi_uldivmod>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4b38      	ldr	r3, [pc, #224]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2264      	movs	r2, #100	@ 0x64
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	1acb      	subs	r3, r1, r3
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	3332      	adds	r3, #50	@ 0x32
 8002f08:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f14:	441c      	add	r4, r3
 8002f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f24:	4642      	mov	r2, r8
 8002f26:	464b      	mov	r3, r9
 8002f28:	1891      	adds	r1, r2, r2
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	415b      	adcs	r3, r3
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f34:	4641      	mov	r1, r8
 8002f36:	1851      	adds	r1, r2, r1
 8002f38:	6039      	str	r1, [r7, #0]
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	414b      	adcs	r3, r1
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f4c:	4659      	mov	r1, fp
 8002f4e:	00cb      	lsls	r3, r1, #3
 8002f50:	4651      	mov	r1, sl
 8002f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f56:	4651      	mov	r1, sl
 8002f58:	00ca      	lsls	r2, r1, #3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4642      	mov	r2, r8
 8002f62:	189b      	adds	r3, r3, r2
 8002f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f66:	464b      	mov	r3, r9
 8002f68:	460a      	mov	r2, r1
 8002f6a:	eb42 0303 	adc.w	r3, r2, r3
 8002f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f88:	4649      	mov	r1, r9
 8002f8a:	008b      	lsls	r3, r1, #2
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f92:	4641      	mov	r1, r8
 8002f94:	008a      	lsls	r2, r1, #2
 8002f96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f9a:	f7fd f91b 	bl	80001d4 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	2164      	movs	r1, #100	@ 0x64
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	3332      	adds	r3, #50	@ 0x32
 8002fb6:	4a08      	ldr	r2, [pc, #32]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	f003 020f 	and.w	r2, r3, #15
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4422      	add	r2, r4
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd8:	51eb851f 	.word	0x51eb851f

08002fdc <memset>:
 8002fdc:	4402      	add	r2, r0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d100      	bne.n	8002fe6 <memset+0xa>
 8002fe4:	4770      	bx	lr
 8002fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fea:	e7f9      	b.n	8002fe0 <memset+0x4>

08002fec <__libc_init_array>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	4d0d      	ldr	r5, [pc, #52]	@ (8003024 <__libc_init_array+0x38>)
 8002ff0:	4c0d      	ldr	r4, [pc, #52]	@ (8003028 <__libc_init_array+0x3c>)
 8002ff2:	1b64      	subs	r4, r4, r5
 8002ff4:	10a4      	asrs	r4, r4, #2
 8002ff6:	2600      	movs	r6, #0
 8002ff8:	42a6      	cmp	r6, r4
 8002ffa:	d109      	bne.n	8003010 <__libc_init_array+0x24>
 8002ffc:	4d0b      	ldr	r5, [pc, #44]	@ (800302c <__libc_init_array+0x40>)
 8002ffe:	4c0c      	ldr	r4, [pc, #48]	@ (8003030 <__libc_init_array+0x44>)
 8003000:	f000 f826 	bl	8003050 <_init>
 8003004:	1b64      	subs	r4, r4, r5
 8003006:	10a4      	asrs	r4, r4, #2
 8003008:	2600      	movs	r6, #0
 800300a:	42a6      	cmp	r6, r4
 800300c:	d105      	bne.n	800301a <__libc_init_array+0x2e>
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	f855 3b04 	ldr.w	r3, [r5], #4
 8003014:	4798      	blx	r3
 8003016:	3601      	adds	r6, #1
 8003018:	e7ee      	b.n	8002ff8 <__libc_init_array+0xc>
 800301a:	f855 3b04 	ldr.w	r3, [r5], #4
 800301e:	4798      	blx	r3
 8003020:	3601      	adds	r6, #1
 8003022:	e7f2      	b.n	800300a <__libc_init_array+0x1e>
 8003024:	080031d8 	.word	0x080031d8
 8003028:	080031d8 	.word	0x080031d8
 800302c:	080031d8 	.word	0x080031d8
 8003030:	080031dc 	.word	0x080031dc

08003034 <memcpy>:
 8003034:	440a      	add	r2, r1
 8003036:	4291      	cmp	r1, r2
 8003038:	f100 33ff 	add.w	r3, r0, #4294967295
 800303c:	d100      	bne.n	8003040 <memcpy+0xc>
 800303e:	4770      	bx	lr
 8003040:	b510      	push	{r4, lr}
 8003042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800304a:	4291      	cmp	r1, r2
 800304c:	d1f9      	bne.n	8003042 <memcpy+0xe>
 800304e:	bd10      	pop	{r4, pc}

08003050 <_init>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	bf00      	nop
 8003054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003056:	bc08      	pop	{r3}
 8003058:	469e      	mov	lr, r3
 800305a:	4770      	bx	lr

0800305c <_fini>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	bf00      	nop
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr
